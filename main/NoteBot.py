import os

import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

from Note_bot.main.ui.UIManager import UIManager
from Note_bot.main.service.NoteService import NoteManager
from Note_bot.main.service.AIService import AIService
from Note_bot.main.data.UserDataManager import UserDataManager
from Note_bot.main.service.ReminderWorkerService import ReminderWorkerService


class NoteBot:
    def __init__(self):
        self.bot = telebot.TeleBot(os.getenv('BOT_TOKEN'))
        self.user_data = UserDataManager()
        self.note_manager = NoteManager(self.user_data)
        self.ui_manager = UIManager(self.bot, self.user_data)
        self.ai_service = AIService(self.user_data)
        self.reminder_worker = ReminderWorkerService(self.bot, self.user_data)

        self.register_handlers()
        self.reminder_worker.start()

    def register_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def start_message(message):
            self.ui_manager.send_main_menu(message.chat.id)

        @self.bot.message_handler(func=lambda message: True)
        def handle_other_messages(message):
            chat_id = message.chat.id
            text = message.text

            if chat_id in self.user_data.current_page and (text.isdigit() or (text and text.strip()[0].isdigit())):
                self.process_note_selection_for_edit(message)
                return

            if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É":
                msg = self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ (–º–æ–∂–Ω–æ —Å –≤—Ä–µ–º–µ–Ω–µ–º).")
                self.bot.register_next_step_handler(msg, self.add_note_handler)

            elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É":
                notes = self.user_data.get_user_notes(chat_id)
                if notes:
                    self.ui_manager.send_notes_list(chat_id)
                    msg = self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
                    self.bot.register_next_step_handler(msg, self.delete_note_handler)
                else:
                    self.bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")

            elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É":
                self.edit_note_step1(message)

            elif text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è"]:
                self.process_note_selection_for_edit(message)

            elif text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫":
                self.ui_manager.send_notes_list(chat_id)

            elif text == "ü§ñ –ê–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò":
                self.analyze_notes_step1(message)

            elif text == "üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º":
                notes = self.user_data.get_user_notes(chat_id)
                if notes:
                    msg = self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–º–µ—Ç–∫–∞—Ö:")
                    self.bot.register_next_step_handler(msg, self.search_notes_handler)
                else:
                    self.bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞.")

            elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                self.ui_manager.show_statistics(chat_id)

            elif text in ["üìà 7 –¥–Ω–µ–π", "üìâ 30 –¥–Ω–µ–π"]:
                days_map = {
                    "üìà 7 –¥–Ω–µ–π": 7,
                    "üìâ 30 –¥–Ω–µ–π": 30
                }
                self.ui_manager.send_statistics_plot(chat_id, days_map[text])
                self.ui_manager.show_statistics(chat_id)

            elif text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–º–µ—Ç–æ–∫":
                self.export_notes_step1(message)

            elif text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
                self.ui_manager.about_bot(chat_id)

            elif text == "üîô –ù–∞–∑–∞–¥":
                self.ui_manager.send_main_menu(chat_id)

            else:
                self.bot.send_message(chat_id, "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ—Ç –º–µ–Ω—é:")
                self.ui_manager.send_main_menu(chat_id)

    def add_note_handler(self, message):
        result = self.note_manager.add_note(message)
        self.bot.send_message(message.chat.id, result)
        self.ui_manager.send_main_menu(message.chat.id)

    def delete_note_handler(self, message):
        result = self.note_manager.delete_note(message.chat.id, message.text)
        self.bot.send_message(message.chat.id, result)
        self.ui_manager.send_main_menu(message.chat.id)

    def edit_note_step1(self, message):
        chat_id = message.chat.id
        notes = self.user_data.get_user_notes(chat_id)

        if not notes:
            self.bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            self.ui_manager.send_main_menu(chat_id)
            return

        self.user_data.set_current_page(chat_id, 0)
        self.ui_manager.show_notes_page(chat_id)

    def process_note_selection_for_edit(self, message):
        chat_id = message.chat.id

        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            self.ui_manager.send_main_menu(chat_id)
            return

        if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            self.ui_manager.show_notes_page(chat_id, self.user_data.get_current_page(chat_id) - 1)
            return
        elif message.text == "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è":
            self.ui_manager.show_notes_page(chat_id, self.user_data.get_current_page(chat_id) + 1)
            return

        try:
            note_id = int(message.text.split(":")[0].strip())
            notes = self.user_data.get_user_notes(chat_id)

            if note_id in notes:
                current_text = notes[note_id]

                markup = ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"))

                msg = self.bot.send_message(
                    chat_id,
                    f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ #{note_id}:\n\n{current_text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ—Ç–∫–∏:",
                    reply_markup=markup
                )
                self.bot.register_next_step_handler(msg, self.edit_note_step2, note_id)
            else:
                self.bot.send_message(chat_id, "–¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ—Ç.")
                self.ui_manager.show_notes_page(chat_id, self.user_data.get_current_page(chat_id))
        except (ValueError, IndexError):
            self.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
            self.ui_manager.show_notes_page(chat_id, self.user_data.get_current_page(chat_id))

    def edit_note_step2(self, message, note_id):
        chat_id = message.chat.id

        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è":
            self.ui_manager.send_main_menu(chat_id)
            return

        result = self.note_manager.edit_note(chat_id, note_id, message.text)
        self.bot.send_message(chat_id, result)
        self.ui_manager.send_main_menu(chat_id)

    def search_notes_handler(self, message):
        result = self.note_manager.search_notes(message.chat.id, message.text)
        if result.startswith("üîç –ù–∞–π–¥–µ–Ω—ã –∑–∞–º–µ—Ç–∫–∏:"):
            self.bot.send_message(message.chat.id, result, parse_mode="Markdown")
        else:
            self.bot.send_message(message.chat.id, result)
        self.ui_manager.send_main_menu(message.chat.id)

    def analyze_notes_step1(self, message):
        chat_id = message.chat.id
        notes = self.user_data.get_user_notes(chat_id)

        if not notes:
            self.bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return

        self.ui_manager.send_notes_list(chat_id)
        self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–º–µ—Ç–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∞–Ω–∞–ª–∏–∑:")
        self.bot.register_next_step_handler(message, self.analyze_notes_step2)

    def analyze_notes_step2(self, message):
        result = self.ai_service.analyze_notes(message.chat.id, message.text)
        self.bot.send_message(message.chat.id, result)
        self.ui_manager.send_main_menu(message.chat.id)

    def export_notes_step1(self, message):
        chat_id = message.chat.id
        notes = self.user_data.get_user_notes(chat_id)

        if not notes:
            self.bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            self.ui_manager.send_main_menu(chat_id)
            return

        self.ui_manager.send_notes_list(chat_id)
        self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–º–µ—Ç–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:")
        self.bot.register_next_step_handler(message, self.export_notes_step2)

    def export_notes_step2(self, message):
        result = self.note_manager.export_notes(message.chat.id, message.text)

        if isinstance(result, list):
            for file_name in result:
                with open(file_name, "rb") as file:
                    self.bot.send_document(message.chat.id, file)
                os.remove(file_name)
            self.bot.send_message(message.chat.id, "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
        else:
            self.bot.send_message(message.chat.id, result)

        self.ui_manager.send_main_menu(message.chat.id)

    def run(self):
        self.bot.infinity_polling()
