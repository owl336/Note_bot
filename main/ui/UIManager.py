from datetime import datetime, timedelta
import io
from matplotlib import pyplot as plt
from telebot.types import ReplyKeyboardMarkup, KeyboardButton


class UIManager:
    def __init__(self, bot, user_data_manager):
        self.bot = bot
        self.user_data = user_data_manager

    def send_main_menu(self, chat_id):
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(
            KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"),
            KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
        )
        markup.row(
            KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É"),
            KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫")
        )
        markup.row(
            KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º"),
            KeyboardButton("ü§ñ –ê–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò")
        )
        markup.row(
            KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–º–µ—Ç–æ–∫")
        )
        markup.row(
            KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ")
        )
        self.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

    def send_notes_list(self, chat_id):
        notes = self.user_data.get_user_notes(chat_id)

        if not notes:
            self.bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
            return

        message_text = "–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n"
        for note_id, note_text in notes.items():
            message_text += f"{note_id}. {note_text}\n"

        self.bot.send_message(chat_id, message_text)

    def show_notes_page(self, chat_id, page=0):
        notes = self.user_data.get_user_notes(chat_id)
        note_ids = sorted(notes.keys())
        total_notes = len(note_ids)
        notes_per_page = 4

        total_pages = (total_notes + notes_per_page - 1) // notes_per_page

        if page < 0:
            page = 0
        elif page >= total_pages:
            page = total_pages - 1

        self.user_data.set_current_page(chat_id, page)

        start_idx = page * notes_per_page
        end_idx = min(start_idx + notes_per_page, total_notes)
        page_note_ids = note_ids[start_idx:end_idx]

        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

        for note_id in page_note_ids:
            note_preview = notes[note_id][:20] + "..." if len(notes[note_id]) > 20 else notes[note_id]
            markup.add(KeyboardButton(f" {note_id}: {note_preview}"))

        nav_buttons = []
        if page > 0:
            nav_buttons.append(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
        if page < total_pages - 1:
            nav_buttons.append(KeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è"))

        if nav_buttons:
            markup.row(*nav_buttons)

        markup.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))

        self.bot.send_message(
            chat_id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):",
            reply_markup=markup
        )

    def show_statistics(self, chat_id):
        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        markup.add(
            KeyboardButton("üìà 7 –¥–Ω–µ–π"),
            KeyboardButton("üìâ 30 –¥–Ω–µ–π"),
        )
        markup.add(
            KeyboardButton("üîô –ù–∞–∑–∞–¥")
        )

        self.bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=markup
        )

    def generate_combined_plot(self, chat_id, days=7):
        stats = self.user_data.get_user_statistics(chat_id)
        fig, ax = plt.subplots(figsize=(12, 6))

        today = datetime.now()
        dates = [(today - timedelta(days=i)).strftime("%m-%d") for i in range(days)][::-1]

        created = [stats["notes_created"].get(date, 0) for date in dates]
        deleted = [stats["notes_deleted"].get(date, 0) for date in dates]
        ai_used = [stats["ai_analysis"].get(date, 0) for date in dates]

        ax.plot(dates, created, marker='o', label='–°–æ–∑–¥–∞–Ω–æ –∑–∞–º–µ—Ç–æ–∫', linewidth=2)
        ax.plot(dates, deleted, marker='s', label='–£–¥–∞–ª–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫', linewidth=2)
        ax.plot(dates, ai_used, marker='^', label='AI –∞–Ω–∞–ª–∏–∑–æ–≤', linewidth=2)

        ax.set_title(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ {days} –¥–Ω–µ–π", pad=20, fontsize=14)
        ax.set_xlabel("–î–∞—Ç–∞", fontsize=12)
        ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", fontsize=12)
        ax.tick_params(axis='x', rotation=45, labelsize=10)
        ax.tick_params(axis='y', labelsize=10)
        ax.grid(True, linestyle='--', alpha=0.7)
        ax.legend(fontsize=12)

        fig.tight_layout()

        buf = io.BytesIO()
        fig.savefig(buf, format='png', dpi=120, bbox_inches='tight')
        buf.seek(0)
        plt.close(fig)

        return buf

    def send_statistics_plot(self, chat_id, days):
        stats = self.user_data.get_user_statistics(chat_id)
        plot = self.generate_combined_plot(chat_id, days)

        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω–æ: {sum(stats['notes_created'].values())}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫ —É–¥–∞–ª–µ–Ω–æ: {sum(stats['notes_deleted'].values())}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ AI –∞–Ω–∞–ª–∏–∑–æ–≤: {stats['total_ai_used']}"
        )

        self.bot.send_photo(chat_id, plot, caption=stats_text)
        plot.close()

    def about_bot(self, chat_id):
        bot_info = (
            "*–û –±–æ—Ç–µ*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.\n\n"
            "üìã *–§—É–Ω–∫—Ü–∏–∏:*\n"
            "‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
            "‚Ä¢ ‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
            "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
            "‚Ä¢ üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫\n"
            "‚Ä¢ üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º\n"
            "‚Ä¢ ü§ñ –ê–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò\n"
            "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–º–µ—Ç–æ–∫\n\n"
            "‚öôÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º ([@the\\_forest\\_owl]("
            "https://t.me/the_forest_owl))."
        )
        self.bot.send_message(chat_id, bot_info, parse_mode="Markdown")
