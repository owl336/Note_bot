import dateparser
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import threading
import time
import re
from dotenv import load_dotenv
import os
import requests
import io
from datetime import datetime, timedelta
import matplotlib
import matplotlib.pyplot as plt

matplotlib.use('Agg')

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
API_KEY = os.getenv('API_KEY')
API_URL = os.getenv('API_URL')

bot = telebot.TeleBot(BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_notes = {}  # {chat_id: {note_id: note_text}}
user_reminders = {}  # {chat_id: [(note_id, remind_time)]}
user_statistics = {}  # {chat_id: statistics_dict}
current_page = {}  # {chat_id: page_number}


def get_user_notes(chat_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id not in user_notes:
        user_notes[chat_id] = {}
    return user_notes[chat_id]


def get_user_reminders(chat_id):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id not in user_reminders:
        user_reminders[chat_id] = []
    return user_reminders[chat_id]


def get_user_statistics(chat_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id not in user_statistics:
        user_statistics[chat_id] = {
            "notes_created": {},  # {date: count}
            "notes_deleted": {},  # {date: count}
            "ai_analysis": {},  # {date: count}
            "total_ai_used": 0
        }
    return user_statistics[chat_id]


def update_user_statistics(chat_id, stat_type):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    stats = get_user_statistics(chat_id)
    today = datetime.now().strftime("%m-%d")

    if stat_type in stats:
        if today in stats[stat_type]:
            stats[stat_type][today] += 1
        else:
            stats[stat_type][today] = 1

        if stat_type == "ai_analysis":
            stats["total_ai_used"] += 1


@bot.message_handler(commands=['start'])
def start_message(message):
    send_main_menu(message.chat.id)


@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    chat_id = message.chat.id
    text = message.text

    if chat_id in current_page and (text.isdigit() or (text and text.strip()[0].isdigit())):
        process_note_selection_for_edit(message)
        return

    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É":
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ (–º–æ–∂–Ω–æ —Å –≤—Ä–µ–º–µ–Ω–µ–º).")
        bot.register_next_step_handler(msg, add_note)

    elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É":
        notes = get_user_notes(message.chat.id)
        if notes:
            send_notes_list(message.chat.id)
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            bot.register_next_step_handler(msg, delete_note)
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")

    elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É":
        edit_note_step1(message)

    elif text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è"]:
        process_note_selection_for_edit(message)

    elif text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫":
        send_notes_list(message.chat.id)

    elif text == "ü§ñ –ê–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò":
        analyze_notes_step1(message)
    elif text == "üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º":
        notes = get_user_notes(message.chat.id)
        if notes:
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–º–µ—Ç–∫–∞—Ö:")
            bot.register_next_step_handler(msg, search_notes)
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_statistics(message)
    elif text in ["üìà 7 –¥–Ω–µ–π", "üìâ 30 –¥–Ω–µ–π"]:
        change_statistics_period(message)
    elif text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–º–µ—Ç–æ–∫":
        export_notes_step1(message)
    elif text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        about_bot(message)
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ—Ç –º–µ–Ω—é:")
        send_main_menu(message.chat.id)


def add_note(message):
    chat_id = message.chat.id
    notes = get_user_notes(chat_id)
    reminders = get_user_reminders(chat_id)

    note_text = message.text.strip()
    if note_text:
        note_id = len(notes) + 1
        notes[note_id] = note_text
        update_user_statistics(chat_id, "notes_created")

        time_to_remind = extract_time(note_text)
        if time_to_remind:
            reminders.append((note_id, time_to_remind))
            bot.send_message(
                chat_id,
                f"–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –Ω–∞ {time_to_remind.strftime('%Y-%m-%d %H:%M:%S')}."
            )
        else:
            bot.send_message(chat_id, "–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
    else:
        bot.send_message(chat_id, "–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
    send_main_menu(chat_id)


def delete_note(message):
    chat_id = message.chat.id
    notes = get_user_notes(chat_id)
    reminders = get_user_reminders(chat_id)

    try:
        note_id = int(message.text.strip())
        if note_id in notes:
            notes.pop(note_id)
            update_user_statistics(chat_id, "notes_deleted")

            old_notes = dict(notes)
            notes.clear()
            for new_id, old_id in enumerate(sorted(old_notes.keys()), start=1):
                notes[new_id] = old_notes[old_id]


            new_reminders = []
            for rem_note_id, rem_time in reminders:
                if rem_note_id == note_id:
                    continue

                new_id = None
                for k, v in notes.items():
                    if old_notes.get(rem_note_id) == v:
                        new_id = k
                        break
                if new_id is not None:
                    new_reminders.append((new_id, rem_time))

            user_reminders[chat_id] = new_reminders
            bot.send_message(chat_id, f"–ó–∞–º–µ—Ç–∫–∞ {note_id} —É–¥–∞–ª–µ–Ω–∞.")
        else:
            bot.send_message(chat_id, "–¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ—Ç.")
    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.")
    send_main_menu(chat_id)


def edit_note_step1(message):
    chat_id = message.chat.id
    notes = get_user_notes(chat_id)

    if not notes:
        bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        send_main_menu(chat_id)
        return

    current_page[chat_id] = 0
    show_notes_page(chat_id)


def show_notes_page(chat_id, page=0):
    notes = get_user_notes(chat_id)
    note_ids = sorted(notes.keys())
    total_notes = len(note_ids)
    notes_per_page = 4

    total_pages = (total_notes + notes_per_page - 1) // notes_per_page

    if page < 0:
        page = 0
    elif page >= total_pages:
        page = total_pages - 1

    current_page[chat_id] = page

    start_idx = page * notes_per_page
    end_idx = min(start_idx + notes_per_page, total_notes)
    page_note_ids = note_ids[start_idx:end_idx]

    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    for note_id in page_note_ids:
        note_preview = notes[note_id][:20] + "..." if len(notes[note_id]) > 20 else notes[note_id]
        markup.add(KeyboardButton(f" {note_id}: {note_preview}"))

    nav_buttons = []
    if page > 0:
        nav_buttons.append(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    if page < total_pages - 1:
        nav_buttons.append(KeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è"))

    if nav_buttons:
        markup.row(*nav_buttons)

    markup.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))

    bot.send_message(
        chat_id,
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):",
        reply_markup=markup
    )


def process_note_selection_for_edit(message):
    chat_id = message.chat.id

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        send_main_menu(chat_id)
        return

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        show_notes_page(chat_id, current_page.get(chat_id, 0) - 1)
        return
    elif message.text == "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è":
        show_notes_page(chat_id, current_page.get(chat_id, 0) + 1)
        return

    try:
        note_id = int(message.text.split(":")[0].strip())
        notes = get_user_notes(chat_id)

        if note_id in notes:
            current_text = notes[note_id]

            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"))

            msg = bot.send_message(
                chat_id,
                f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ #{note_id}:\n\n{current_text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ—Ç–∫–∏:",
                reply_markup=markup
            )
            bot.register_next_step_handler(msg, edit_note_step2, note_id)
        else:
            bot.send_message(chat_id, "–¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ—Ç.")
            show_notes_page(chat_id, current_page.get(chat_id, 0))
    except (ValueError, IndexError):
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        show_notes_page(chat_id, current_page.get(chat_id, 0))


def edit_note_step2(message, note_id):
    chat_id = message.chat.id
    notes = get_user_notes(chat_id)
    reminders = get_user_reminders(chat_id)

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è":
        send_main_menu(chat_id)
        return

    new_text = message.text.strip()
    if new_text:
        notes[note_id] = new_text
        time_to_remind = extract_time(new_text)
        if time_to_remind:
            reminders.append((note_id, time_to_remind))
            bot.send_message(
                chat_id,
                f"–ó–∞–º–µ—Ç–∫–∞ {note_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –Ω–∞ {time_to_remind.strftime('%Y-%m-%d %H:%M:%S')}."
            )
        else:
            bot.send_message(chat_id, f"–ó–∞–º–µ—Ç–∫–∞ {note_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        bot.send_message(chat_id, "–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")

    send_main_menu(chat_id)


def extract_time(note_text):
    patterns = [
        r'—á–µ—Ä–µ–∑ \d+ (–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—É|—á–∞—Å|—á–∞—Å–æ–≤|–¥–µ–Ω—å|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–µ–≤)',
        r'—Å–µ–≥–æ–¥–Ω—è –≤ \d{1,2}(:\d{2})?',
        r'–∑–∞–≤—Ç—Ä–∞ –≤ \d{1,2}(:\d{2})?',
        r'–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ \d{1,2}(:\d{2})?',
        r'\d{1,2}(:\d{2})? (—É—Ç—Ä–∞|–≤–µ—á–µ—Ä–∞|–¥–Ω—è|–Ω–æ—á–∏)',
        r'–≤ \d{1,2}(:\d{2})?',
        r'—á–µ—Ä–µ–∑ —á–∞—Å',
        r'—á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É',
    ]

    for pattern in patterns:
        match = re.search(pattern, note_text.lower())
        if match:
            parsed_date = dateparser.parse(match.group(), settings={'PREFER_DATES_FROM': 'future'})
            if parsed_date:
                return parsed_date
    return None


def send_notes_list(chat_id):
    notes = get_user_notes(chat_id)

    if not notes:
        bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return

    message_text = "–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n"
    for note_id, note_text in notes.items():
        message_text += f"{note_id}. {note_text}\n"

    bot.send_message(chat_id, message_text)


def send_main_menu(chat_id):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(
        KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"),
        KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
    )
    markup.row(
        KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É"),
        KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫")
    )
    markup.row(
        KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º"),
        KeyboardButton("ü§ñ –ê–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò")
    )
    markup.row(
        KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–º–µ—Ç–æ–∫")
    )
    markup.row(
        KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


def reminder_worker():
    while True:
        now = datetime.now()
        for chat_id in list(user_reminders.keys()):
            reminders = get_user_reminders(chat_id)
            notes = get_user_notes(chat_id)

            for reminder in reminders[:]:
                note_id, remind_time = reminder
                if now >= remind_time:
                    if note_id in notes:
                        bot.send_message(chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {notes[note_id]}")
                    reminders.remove(reminder)
        time.sleep(30)


def search_notes(message):
    chat_id = message.chat.id
    notes = get_user_notes(chat_id)
    search_query = message.text.strip().lower()

    if not search_query:
        bot.send_message(chat_id, "–í—ã –≤–≤–µ–ª–∏ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.")
        send_main_menu(chat_id)
        return

    found_notes = {}
    for note_id, note_text in notes.items():
        if search_query in note_text.lower():
            highlighted_text = note_text.replace(
                search_query,
                f"*{search_query}*"
            )
            found_notes[note_id] = highlighted_text

    if found_notes:
        response = "üîç –ù–∞–π–¥–µ–Ω—ã –∑–∞–º–µ—Ç–∫–∏:\n\n"
        for note_id, note_text in found_notes.items():
            response += f"{note_id}. {note_text}\n\n"
        bot.send_message(chat_id, response, parse_mode="Markdown")
    else:
        bot.send_message(chat_id, f"–ó–∞–º–µ—Ç–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ '{search_query}', –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    send_main_menu(chat_id)


def analyze_notes_step1(message):
    chat_id = message.chat.id
    notes = get_user_notes(chat_id)

    if not notes:
        bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    send_notes_list(chat_id)
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–º–µ—Ç–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∞–Ω–∞–ª–∏–∑:")
    bot.register_next_step_handler(message, analyze_notes_step2)


def analyze_notes_step2(message):
    chat_id = message.chat.id
    notes = get_user_notes(chat_id)

    if not API_KEY or not API_URL:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: API-–∫–ª—é—á –∏–ª–∏ URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        return

    try:
        note_ids = list(map(int, message.text.split(',')))
        update_user_statistics(chat_id, "ai_analysis")

        selected_notes = [notes[note_id] for note_id in note_ids if note_id in notes]

        if not selected_notes:
            bot.send_message(chat_id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–º–µ—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        if len(note_ids) < 3:
            bot.send_message(chat_id, "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 3 –∑–∞–º–µ—Ç–∫–∏.")
            return

        notes_text = " ".join(selected_notes)
        payload = {
            "model": "qwen/qwq-32b:free",
            "messages": [
                {"role": "system", "content": "–í—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–º–µ—Ç–æ–∫."},
                {"role": "user", "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–º–µ—Ç–∫–∏: {notes_text}"}
            ]
        }
        headers = {"Authorization": f"Bearer {API_KEY}"}
        response = requests.post(API_URL, json=payload, headers=headers)

        if response.status_code == 200:
            response_data = response.json()
            analysis = response_data.get("choices", [{}])[0].get("message", {}).get("content", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            bot.send_message(chat_id, f"–ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫:\n\n{analysis}")
        else:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except ValueError:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–º–µ—Ç–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


def generate_combined_plot(chat_id, days=7):
    stats = get_user_statistics(chat_id)
    fig, ax = plt.subplots(figsize=(12, 6))

    today = datetime.now()
    dates = [(today - timedelta(days=i)).strftime("%m-%d") for i in range(days)][::-1]

    created = [stats["notes_created"].get(date, 0) for date in dates]
    deleted = [stats["notes_deleted"].get(date, 0) for date in dates]
    ai_used = [stats["ai_analysis"].get(date, 0) for date in dates]

    ax.plot(dates, created, marker='o', label='–°–æ–∑–¥–∞–Ω–æ –∑–∞–º–µ—Ç–æ–∫', linewidth=2)
    ax.plot(dates, deleted, marker='s', label='–£–¥–∞–ª–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫', linewidth=2)
    ax.plot(dates, ai_used, marker='^', label='AI –∞–Ω–∞–ª–∏–∑–æ–≤', linewidth=2)

    ax.set_title(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ {days} –¥–Ω–µ–π", pad=20, fontsize=14)
    ax.set_xlabel("–î–∞—Ç–∞", fontsize=12)
    ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", fontsize=12)
    ax.tick_params(axis='x', rotation=45, labelsize=10)
    ax.tick_params(axis='y', labelsize=10)
    ax.grid(True, linestyle='--', alpha=0.7)
    ax.legend(fontsize=12)

    fig.tight_layout()

    buf = io.BytesIO()
    fig.savefig(buf, format='png', dpi=120, bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)

    return buf


def send_statistics_plot(chat_id, days):
    stats = get_user_statistics(chat_id)
    plot = generate_combined_plot(chat_id, days)

    stats_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω–æ: {sum(stats['notes_created'].values())}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫ —É–¥–∞–ª–µ–Ω–æ: {sum(stats['notes_deleted'].values())}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ AI –∞–Ω–∞–ª–∏–∑–æ–≤: {stats['total_ai_used']}"
    )

    bot.send_photo(chat_id, plot, caption=stats_text)
    plot.close()


def show_statistics(message):
    chat_id = message.chat.id
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    markup.add(
        KeyboardButton("üìà 7 –¥–Ω–µ–π"),
        KeyboardButton("üìâ 30 –¥–Ω–µ–π"),
    )
    markup.add(
        KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )

    bot.send_message(
        chat_id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=markup
    )


def change_statistics_period(message):
    chat_id = message.chat.id
    days_map = {
        "üìà 7 –¥–Ω–µ–π": 7,
        "üìâ 30 –¥–Ω–µ–π": 30
    }
    send_statistics_plot(chat_id, days_map[message.text])
    show_statistics(message)


def export_notes_step1(message):
    chat_id = message.chat.id
    notes = get_user_notes(chat_id)

    if not notes:
        bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        send_main_menu(chat_id)
        return

    send_notes_list(chat_id)
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–º–µ—Ç–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:")
    bot.register_next_step_handler(message, export_notes_step2)


def export_notes_step2(message):
    chat_id = message.chat.id
    notes = get_user_notes(chat_id)

    try:
        note_ids = list(map(int, message.text.split(',')))
        selected_notes = [notes[note_id] for note_id in note_ids if note_id in notes]

        if not selected_notes:
            bot.send_message(chat_id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–º–µ—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        for note_id, note_text in zip(note_ids, selected_notes):
            file_name = f"note_{note_id}.txt"
            with open(file_name, "w", encoding="utf-8") as file:
                file.write(note_text)

            with open(file_name, "rb") as file:
                bot.send_document(chat_id, file, caption=f"–ó–∞–º–µ—Ç–∫–∞ #{note_id}")

        bot.send_message(chat_id, "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–º–µ—Ç–æ–∫: {str(e)}")
    finally:
        send_main_menu(chat_id)


def about_bot(message):
    bot_info = (
        "*–û –±–æ—Ç–µ*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.\n\n"
        "üìã *–§—É–Ω–∫—Ü–∏–∏:*\n"
        "‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "‚Ä¢ ‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "‚Ä¢ üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫\n"
        "‚Ä¢ üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º\n"
        "‚Ä¢ ü§ñ –ê–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–º–µ—Ç–æ–∫\n\n"
        "‚öôÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º."
    )
    bot.send_message(message.chat.id, bot_info, parse_mode="Markdown")


# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
threading.Thread(target=reminder_worker, daemon=True).start()

bot.infinity_polling()