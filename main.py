import dateparser
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import threading
import time
from datetime import datetime
import re
from dotenv import load_dotenv
import os
import requests

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
API_KEY = os.getenv('API_KEY')
API_URL = os.getenv('API_URL')

bot = telebot.TeleBot(BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
notes = {}
# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminders = []


@bot.message_handler(commands=['start'])
def start_message(message):
    send_main_menu(message.chat.id)


@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    text = message.text

    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É":
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ (–º–æ–∂–Ω–æ —Å –≤—Ä–µ–º–µ–Ω–µ–º).")
        bot.register_next_step_handler(msg, add_note)

    elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É":
        if notes:
            send_notes_list(message.chat.id)
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            bot.register_next_step_handler(msg, delete_note)
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")

    elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É":
        if notes:
            send_notes_list(message.chat.id)
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            bot.register_next_step_handler(msg, edit_note_step1)
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")

    elif text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫":
        send_notes_list(message.chat.id)

    elif text == "ü§ñ –ê–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò":
        analyze_notes(message.chat.id)


    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ—Ç –º–µ–Ω—é:")
        send_main_menu(message.chat.id)


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == 'add_note':
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ (–º–æ–∂–Ω–æ —Å –≤—Ä–µ–º–µ–Ω–µ–º).")
        bot.register_next_step_handler(msg, add_note)

    elif call.data == 'list_notes':
        send_notes_list(call.message.chat.id)

    elif call.data == 'delete_note':
        if notes:
            send_notes_list(call.message.chat.id)
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            bot.register_next_step_handler(msg, delete_note)
        else:
            bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")

    elif call.data == 'edit_note':
        if notes:
            send_notes_list(call.message.chat.id)
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            bot.register_next_step_handler(msg, edit_note_step1)
        else:
            bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")


def add_note(message):
    note_text = message.text.strip()
    if note_text:
        note_id = len(notes) + 1
        notes[note_id] = note_text
        time_to_remind = extract_time(note_text)
        if time_to_remind:
            reminders.append((message.chat.id, note_id, time_to_remind))
            bot.send_message(
                message.chat.id,
                f"–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –Ω–∞ {time_to_remind.strftime('%Y-%m-%d %H:%M:%S')}."
            )
        else:
            bot.send_message(message.chat.id, "–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
    else:
        bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
    send_main_menu(message.chat.id)


def delete_note(message):
    try:
        note_id = int(message.text.strip())
        if note_id in notes:
            notes.pop(note_id)
            global reminders
            reminders = [r for r in reminders if r[1] != note_id]  # –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            bot.send_message(message.chat.id, f"–ó–∞–º–µ—Ç–∫–∞ {note_id} —É–¥–∞–ª–µ–Ω–∞.")
        else:
            bot.send_message(message.chat.id, "–¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ—Ç.")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.")
    send_main_menu(message.chat.id)


def edit_note_step1(message):
    try:
        note_id = int(message.text.strip())
        if note_id in notes:
            current_text = notes[note_id]
            msg = bot.send_message(message.chat.id,
                                   f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ #{note_id}:\n\n{current_text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ—Ç–∫–∏:")
            bot.register_next_step_handler(msg, edit_note_step2, note_id)
        else:
            bot.send_message(message.chat.id, "–¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ—Ç.")
            send_main_menu(message.chat.id)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.")
        send_main_menu(message.chat.id)


def edit_note_step2(message, note_id):
    new_text = message.text.strip()
    if new_text:
        notes[note_id] = new_text
        time_to_remind = extract_time(new_text)
        if time_to_remind:
            reminders.append((message.chat.id, note_id, time_to_remind))
            bot.send_message(
                message.chat.id,
                f"–ó–∞–º–µ—Ç–∫–∞ {note_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –Ω–∞ {time_to_remind.strftime('%Y-%m-%d %H:%M:%S')}."
            )
        else:
            bot.send_message(message.chat.id, f"–ó–∞–º–µ—Ç–∫–∞ {note_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
    send_main_menu(message.chat.id)


def extract_time(note_text):
    patterns = [
        r'—á–µ—Ä–µ–∑ \d+ (–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—É|—á–∞—Å|—á–∞—Å–æ–≤|–¥–µ–Ω—å|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–µ–≤)',  # —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –∏ —Ç.–ø.
        r'—Å–µ–≥–æ–¥–Ω—è –≤ \d{1,2}(:\d{2})?',  # —Å–µ–≥–æ–¥–Ω—è –≤ 6 –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤ 6:00
        r'–∑–∞–≤—Ç—Ä–∞ –≤ \d{1,2}(:\d{2})?',  # –∑–∞–≤—Ç—Ä–∞ –≤ 10 –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00
        r'–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ \d{1,2}(:\d{2})?',
        r'\d{1,2}(:\d{2})? (—É—Ç—Ä–∞|–≤–µ—á–µ—Ä–∞|–¥–Ω—è|–Ω–æ—á–∏)',  # 10 —É—Ç—Ä–∞, 6 –≤–µ—á–µ—Ä–∞
        r'–≤ \d{1,2}(:\d{2})?',  # –≤ 10 –∏–ª–∏ –≤ 10:00
        r'—á–µ—Ä–µ–∑ —á–∞—Å',
        r'—á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É',
    ]

    for pattern in patterns:
        match = re.search(pattern, note_text.lower())
        if match:
            parsed_date = dateparser.parse(match.group(), settings={'PREFER_DATES_FROM': 'future'})
            if parsed_date:
                return parsed_date
    return None


def send_notes_list(chat_id):
    if not notes:
        bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return

    message_text = "–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n"
    for note_id, note_text in notes.items():
        message_text += f"{note_id}. {note_text}\n"

    bot.send_message(chat_id, message_text)


def get_main_menu():
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data='add_note'),
        InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫", callback_data='list_notes'),
        InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data='delete_note'),
        InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data='edit_note'),
        InlineKeyboardButton("–ê–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò", callback_data='analyze_notes')
    )
    return markup


def send_main_menu(chat_id):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(
        KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"),
        KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
    )
    markup.row(
        KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É"),
        KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫")
    )
    markup.row(
        KeyboardButton("ü§ñ –ê–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


def reminder_worker():
    while True:
        now = datetime.now()
        for reminder in reminders[:]:
            chat_id, note_id, remind_time = reminder
            if now >= remind_time:
                bot.send_message(chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {notes[note_id]}")
                reminders.remove(reminder)
        time.sleep(30)


def analyze_notes(chat_id):
    if len(notes) < 3:
        bot.send_message(chat_id, "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 3 –∑–∞–º–µ—Ç–∫–∏.")
        return

    if not API_KEY or not API_URL:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: API-–∫–ª—é—á –∏–ª–∏ URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏
        notes_text = " ".join([text for _, text in sorted(notes.items())][-3:])  # –°–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
        payload = {
            "model": "qwen/qwq-32b:free",
            "messages": [
                {"role": "system", "content": "–í—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–º–µ—Ç–æ–∫. –û–±—â–∞–π—Ç–µ—Å—å —Ç–∞–∫, –±—É–¥—Ç–æ –≤—ã "
                                              "–æ—Ç–≤–µ—á–∞–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ª–∏—á–Ω–æ, –ø–æ–º–æ–≥–∞–µ—Ç–µ –µ–º—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ "
                                              "—Ä–µ—à–µ–Ω–∏–µ. –ù–µ –±–æ–π—Ç–µ—Å—å –¥–æ–±–∞–≤–ª—è—Ç—å —ç–º–æ–¥–∑–∏ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å "
                                              "—Ç–µ–ø–ª—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É! üòä."},
                {"role": "user", "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏ —Å–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ + –¥–∞–π "
                                            f"—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –≤–∏–¥–µ –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Å–ø–∏—Å–∫–∞: {notes_text}"}
            ]
        }
        headers = {"Authorization": f"Bearer {API_KEY}"}
        response = requests.post(API_URL, json=payload, headers=headers)

        if response.status_code == 200:
            response_data = response.json()
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
            analysis = response_data.get("choices", [{}])[0].get("message", {}).get("content", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            bot.send_message(chat_id, f"–ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫:\n\n{analysis}")
        else:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


threading.Thread(target=reminder_worker, daemon=True).start()

bot.infinity_polling()
